import typer
from sistema import Sistema
from blockchain import Blockchain

app = typer.Typer()
sistema = Sistema()

@app.command()
def login():
    """
    Realiza login e redireciona para o menu do tipo de usu√°rio.
    """
    login = typer.prompt("Login")
    senha = typer.prompt("Senha", hide_input=True)

    if not sistema.autenticar(login, senha):
        typer.echo("‚ùå Login ou senha inv√°lidos.")
        raise typer.Exit()

    tipo = sistema.tipo_usuario(login)
    typer.echo(f"‚úÖ Bem-vindo, {login} ({tipo})")

    if tipo == "admin":
        menu_admin(login)
    elif tipo == "eleitor":
        menu_eleitor(login)
    elif tipo == "auditor":
        menu_auditor()
    else:
        typer.echo("‚ùå Tipo de usu√°rio desconhecido.")
        raise typer.Exit()


def menu_admin(login):
    while True:
        opcao = typer.prompt(
            "\n[Admin] Escolha uma op√ß√£o:\n"
            "1 - Cadastrar usu√°rio\n"
            "2 - Criar vota√ß√£o\n"
            "3 - Encerrar vota√ß√£o\n"
            "4 - Autorizar eleitor\n"
            "0 - Sair\n"
            "Op√ß√£o"
        )

        if opcao == "1":
            novo_login = typer.prompt("Login do novo usu√°rio")
            senha = typer.prompt("Senha")
            tipo = typer.prompt("Tipo (admin, eleitor, auditor)")
            if sistema.cadastrar_usuario(novo_login, senha, tipo):
                typer.echo("‚úÖ Usu√°rio cadastrado.")
            else:
                typer.echo("‚ö†Ô∏è Usu√°rio j√° existe.")
        elif opcao == "2":
            id_votacao = typer.prompt("ID da nova vota√ß√£o")
            opcoes = typer.prompt("Op√ß√µes separadas por v√≠rgula").split(",")
            if sistema.criar_votacao(id_votacao.strip(), [o.strip() for o in opcoes]):
                typer.echo("‚úÖ Vota√ß√£o criada.")
            else:
                typer.echo("‚ö†Ô∏è Vota√ß√£o j√° existe.")
        elif opcao == "3":
            id_votacao = typer.prompt("ID da vota√ß√£o a encerrar")
            if sistema.encerrar_votacao(id_votacao):
                typer.echo("‚úÖ Vota√ß√£o encerrada.")
            else:
                typer.echo("‚ö†Ô∏è Vota√ß√£o n√£o encontrada.")
        elif opcao == "4":
            id_votacao = typer.prompt("ID da vota√ß√£o")
            eleitor_login = typer.prompt("Login do eleitor")
            if sistema.autorizar_eleitor(id_votacao, eleitor_login):
                typer.echo("‚úÖ Eleitor autorizado.")
            else:
                typer.echo("‚ö†Ô∏è Erro ao autorizar eleitor.")
        elif opcao == "0":
            break


def menu_eleitor(login):
    while True:
        opcao = typer.prompt(
            "\n[Eleitor] Escolha uma op√ß√£o:\n"
            "1 - Votar\n"
            "0 - Sair\n"
            "Op√ß√£o"
        )

        if opcao == "1":
            id_votacao = typer.prompt("ID da vota√ß√£o")
            if not sistema.votacao_ativa(id_votacao):
                typer.echo("‚ö†Ô∏è Vota√ß√£o n√£o est√° ativa.")
                continue

            if not sistema.eleitor_autorizado(id_votacao, login):
                typer.echo("‚ùå Voc√™ n√£o est√° autorizado a votar.")
                continue

            opcoes = sistema.opcoes_disponiveis(id_votacao)
            for i, opc in enumerate(opcoes):
                typer.echo(f"{i + 1} - {opc}")
            escolha = typer.prompt("Digite o n√∫mero da sua escolha")

            try:
                escolha = int(escolha)
                opcao = opcoes[escolha - 1]
            except (ValueError, IndexError):
                typer.echo("‚ùå Op√ß√£o inv√°lida.")
                continue

            caminho = f"data/blockchain_votacao_{id_votacao}.json"
            bc = Blockchain(caminho)
            sucesso = bc.adicionar_voto(login, opcao)
            if sucesso:
                typer.echo("‚úÖ Voto registrado com sucesso.")
            else:
                typer.echo("‚ö†Ô∏è Voc√™ j√° votou nesta vota√ß√£o.")
        elif opcao == "0":
            break


def menu_auditor():
    while True:
        opcao = typer.prompt(
            "\n[Auditor] Escolha uma op√ß√£o:\n"
            "1 - Ver resultado de vota√ß√£o\n"
            "2 - Exportar relat√≥rio CSV\n"
            "0 - Sair\n"
            "Op√ß√£o"
        )

        if opcao == "1":
            id_votacao = typer.prompt("ID da vota√ß√£o")
            caminho = f"data/blockchain_votacao_{id_votacao}.json"
            if not sistema.votacao_ativa(id_votacao):
                bc = Blockchain(caminho)
                relatorio = bc.gerar_relatorio()
                typer.echo("\nüìä Resultado Final:")
                for opcao, total in relatorio["detalhes"].items():
                    typer.echo(f"{opcao}: {total} voto(s)")
                typer.echo(f"\nüèÜ Vencedor: {relatorio['vencedor']}")
            else:
                typer.echo("‚ö†Ô∏è Vota√ß√£o ainda est√° ativa.")
        elif opcao == "2":
            id_votacao = typer.prompt("ID da vota√ß√£o")
            caminho = sistema.exportar_csv(id_votacao)
            if caminho:
                typer.echo(f"‚úÖ Relat√≥rio exportado para {caminho}")
            else:
                typer.echo("‚ùå Erro ao exportar relat√≥rio.")
        elif opcao == "0":
            break


if __name__ == "__main__":
    app()
